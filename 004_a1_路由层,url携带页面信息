# =======================================================================================

1 简单配置
		-第一个参数是正则表达式(如果要精准匹配:'^publish/$')
		-第二个参数是视图函数(不要加括号)
		-url(r'^admin/', admin.site.urls),
		-url(r'^login/(?P<pk>.*)',views.login.as_view()) #添加匹配所有
		-url(r'^login/(?P<pk>\d+)',views.login.as_view()) #添加匹配1个或多个数字
	2 无名分组
		-按位置传参
		-分组之后,会把分组出来的数据,当位置参数,传到视图函数,所以,视图函数需要定义形参
		-url(r'^publish/([0-9]{4})/([0-9]{2})$', views.publish),
		-def publish(request,*args):   视图函数可以这样接收
	3 有名分组
		-按关键字传参
		-有名分组之后,会把分组出来的数据,当关键字参数,传到视图函数,所以,视图函数需要定义形参,形参名字要跟分组的名字对应,与顺序无关
		-url(r'^publish/(?P<year>[0-9]{4})/(?P<mounth>[0-9]{2})/$', views.publish),
		-def publish(request, mounth,year):
		*****有名分组和无名分组,不要混用
	4 反向解析
		-先命一个名:
			-1 无参数:url(r'^publishadd133/$', views.publishadd,name='ddd'),
			-2 无名分组:url(r'^publishadd/([0-9]{4})/([0-9]{2})/$', views.publishadd,name='ddd'),
			-3 有名分组:url(r'^publishadd/(?P<year>[0-9]{4})/(?P<mounth>[0-9]{2})/$', views.publishadd,name='ddd'),
		-在模板层:
			-1 无参数:{% url 'ddd' %}
			-2 无名分组的:{% url 'ddd' 2018 12 %}
			-3 有名分组:{% url 'ddd' 2018 12 %}  还可以 {% url 'ddd' year=2018 mounth=12 %}
			
		-在视图层:
			from django.shortcuts import reverse
			在视图函数里:
			1 无参数:url=reverse('ddd')
			1 无名分组:url=reverse('ddd',args=(2018,12,))
			1 有名分组:url=reverse('ddd',args=(2018,12,)) 还可以 url=reverse('ddd',kwargs={'year':2018,'mounth':12})
	5 路由分发	
		1 在不同的app里创建urls.py
		2 在总路由 
			-from django.conf.urls import include 
			-url(r'^blog/',include('blog.urls')),
			-url(r'^app01/',include('app01.urls')),
		3 在不同的app的urls里配置路由关系	
		***重点***总路由,不能加结束符$
	6 名称空间
		-url(r'^blog/',include('blog.urls',namespace='blog')),
		-子路由:url(r'^publish/$', views.publish,name='test'),
		-反向解析:
			-视图层:url = reverse('blog:test')
			-模板层:{% url 'app01:test'%}
		***一般不要用***
			子路由:url(r'^publish/$', views.publish,name='app01_test'),
			
	7 伪静态
		-路由:url(r'^book/(?P<id>\d+.html)',views.book),
		-访问:http://127.0.0.1:8000/book/4.html
	8 Django 默认这个参数为 APPEND_SLASH = True。 作用就是自动在网址结尾加'/',
		# 为假,不会加反斜杠
		# APPEND_SLASH=False
		
		from mysite.views import hello
			urlpatterns = patterns('',
			('^hello/$', hello),
			)
		因定义了hello/结尾  http://example.com/hello  自动转到  http://example.com/hello/
		当 seetings.py 设置为 APPEND_SLASH = False 时，访问 http://example.com/hello 将会返回 404。
		如果不想要后面的 / ,可以在 urls.py 定义成 '^hello$' 这样的形式。
	
	9.django 2.0和django 1.0 路由层区别(*****url,re_path分组分出来的数据,是字符串)
		-re_path:跟1.0的url用法相同
		-path:传的路径,是准确路径
			5个转换器-->path('test/<path:year>', views.re_test),
			str,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式
			int,匹配正整数，包含0。
			slug,匹配字母、数字以及横杠、下划线组成的字符串。
			uuid,匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。
			path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）
		-自定义转换器
		
			1 定义一个类:（在urls.py文件中）
				class MyCon:
					# 写一个正则(regex)表达式
					regex = '[0-9]{4}'
					# 匹配出來的数据,会传到这里,retrun回去的,会被视图函数接收
					def to_python(self, value):
						return int(value)
					# 反向解析用的
					def to_url(self, value):
						return '%04d' % value
			2 from django.urls import register_converter
			  register_converter(MyCon,'yyy')
			3 path('test/<yyy:year>', views.re_test,name='test'),
# =============================================	
#（在urls.py文件中）
		from django.contrib import admin
		from django.urls import path, re_path,register_converter
		from app01 import views

		# 自定义转换器
		# 1 定义一个类
		class MyCon:
		    # 写一个正则表达式
		    regex = '[0-9]{4}'
		    # 匹配出來的数据,会传到这里,retrun回去的,会被视图函数接收
		    def to_python(self, value):
			return value
		    # 反向解析用的
		    def to_url(self, value):
			return '%04d' % value
		register_converter(MyCon,'yyy')
		urlpatterns = [
		    # re_path---->就是我原来的url
		    # re_path('正则',视图函数)
		    # path传的第一个参数,不是正则,准确的路径,不支持正则
		    # re_path('^test/(?P<year>\d+)',views.re_test),
		    # path('test/<path:year>', views.re_test),
		    # path('test/<yyy:year>', views.re_test,name='test'),
		    path('test/', views.re_test,),
# =============================================	
# 在view.py文件中
from django.shortcuts import render,HttpResponse,reverse

# Create your views here.

# def re_test(request,year):
#     print(year)
#     print(type(year))
#     url=reverse('test',args=(9,))
#     print(url)
#     return HttpResponse('ok')

def re_test(request):
    return HttpResponse('ok')

	
  # =======================================================================================
  #=======================================================================================
  # =======================================================================================
在url.py文件中
from django.conf.urls import url,include
from django.contrib import admin


from app01 import views
# 总项目总url.py路由分发，
# from app01 import urls as appurls
# from blog import urls as blogurls
urlpatterns = [
    # url(r'^admin/', admin.site.urls),
    # publish/匹配四位数字
    url(r'^publish/[0-9]{4}/$', views.publish),
    # 匹配任意长度的数字
    # url(r'^publish/\d+/$', views.publish),
    # url(r'publishadd', views.publishadd),
    # url(r'^publish/([0-9]{4})/([0-9]{2})$', views.publish),
    # url(r'^publish/(\d+)/$', views.publish),
    # url(r'^publish/$', views.publish),
    # # url(r'^publishadd133/([0-9]{4})/([0-9]{2})/$', views.publishadd,name='ddd'),
    # url(r'^publishadd133/(?P<year>[0-9]{4})/(?P<mounth>[0-9]{2})/$', views.publishadd,name='ddd'),
    # url(r'^blog/',include('blog.urls',namespace='blog')),
    # url(r'^app01/',include('app01.urls',namespace='app01')),
    # url(r'^book/(?P<id>\d+.html)',views.book),
]
# =======================================================================================
在app01.py
from django.shortcuts import render, HttpResponse,redirect,reverse

# Create your views here.
# def publish(request,year,mounth):
# def publish(request,mounth,year):
# def publish(request,*args):

# publish(request,year=2018)

# def publish(request, mounth,year):
# def publish(request, *args,**kwargs):
#     if request.method == 'GET':
#         # print(year)
#         # print(mounth)
#         print(args)
#         print(kwargs)
#         return HttpResponse('publishok')
#     elif request.method == 'POST':
#         return HttpResponse('post')

def publish(request):
    if request.method == 'GET':
        # return render(request, 'publish.html')
        # url=reverse('ddd',args=(2018,12,))
        url=reverse('test')
        print(url)
        return redirect(url)
        # # return redirect('/publishadd/')
        # # return render(request,'publish.html')

def publishadd(request,year,mounth):
    return HttpResponse('publishadd')


def book(request,id):
    return HttpResponse('book')

# =======================================================================================
两个app组件,
app01.py中的url
urlpatterns = [
    url(r'^publish/$', views.publish,name='app01_test'),
]
app02.py中的url
urlpatterns = [
    url(r'^blogtest/$', views.test,name='test'),
]
publish.html页面
<body>
<a href="{% url 'app01:test' year=2018 mounth=12 %}">点我</a>
</body>



