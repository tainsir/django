CSRF_TOKEN跨站请求伪造
# ===========================================================================================
中间件:
		-django请求生命周期:
		-中间件:对全局请求的修改,和全局响应的修改
		-process_request:从上往下执行
		-process_response:从下往上
		-process_view
		-process_exception
		-process_template_response
	csrf:跨站请求伪造
		-django处理了这种攻击:中间件
		-往后台传json数据,可以放在头中
	xss攻击:跨站脚本攻击
	
	局部,全局禁用csrf:
		-全局禁用:注释掉中间件
			-局部使用:
				-fbv
					from django.views.decorators.csrf import csrf_exempt,csrf_protect
					@csrf_protect
					视图函数
				-cbv
					-from django.utils.decorators import method_decorator
					-只能 加在类上(name=dispatch),或者加在dispatch方法上


# ===========================================================================================
# ===========================================================================================


csrf:跨站请求伪造	
		比如:转账请求:transfer?to=lqz&count=1000
		-是什么?攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的
		-如何防范:
			-通过refer
			-加一个随机字符串校验(加载请求的路径里,加载请求体中)
			-在请求头中加字符串校验
		django中的应用:
			-中间件不注释掉
			-以后再发post请求,携带那个随机字符串
				-form表单形式:
					<form action="" method="post">
						{% csrf_token %}
						<input type="text" name="name">
						<input type="text" name="pwd">
						<input type="submit" value="提交">
					</form>
				-ajax提交
				data: {
					'name': $('[name="name"]').val(),
					'pwd': $('[name="pwd"]').val(),
					//'csrfmiddlewaretoken': $('[name="csrfmiddlewaretoken"]').val()
					'csrfmiddlewaretoken': '{{ csrf_token }}'
					},
		csrf:局部禁用,局部使用
			-用装饰器:from django.views.decorators.csrf import csrf_exempt,csrf_protect
			-fbv--->直接加载fbv上就行了
				-局部禁用,全局得使用
				 @csrf_exempt
				 def csrf_disable(request):
				         print(request.POST)
				         return HttpResponse('ok')
				-局部使用,全局得禁用
				 @csrf_protect
				 def csrf_disable(request):
				         print(request.POST)
				         return HttpResponse('ok')
			-cbv-->只能加在dispatch方法或者类上面
				-局部禁用,全局得使用
				-局部使用,全局得禁用
				from django.views import View
				from django.utils.decorators import method_decorator
				@method_decorator(csrf_protect,name='dispatch')
				class Csrf_disable(View):
					# @method_decorator(csrf_protect)
					def dispatch(self, request, *args, **kwargs):
						ret=super().dispatch(request, *args, **kwargs)
						return ret
					def get(self,request):
						return HttpResponse('ok')

					def post(self,request):
						return HttpResponse('post---ok')


# ================================================================================================
一、CSRF是什么
CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。
攻击者盗用了你的身份，以你的名义发送恶意请求，但对服务器来说这个请求是完全合法的

# ================================================================================================
二、CSRF攻击原理
如下图：
19_CSRF.png
link: https://www.cnblogs.com/liuqingzheng/articles/9509739.html#_label4
link: https://www.jianshu.com/p/164b1eee0d2e
从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：
1.登录受信任网站A，并在本地生成Cookie。

2.在不登出A的情况下，访问危险网站B。

看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：
1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。

2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了......）

3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。
# ================================================================================================

三、CSRF攻击防范
目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证

# ================================================================================================

四、CSRF的简单使用
方法一：在form表单中应用：
<form action="" method="post">
    {% csrf_token %}
    <p>用户名：<input type="text" name="name"></p>
    <p>密码：<input type="text" name="password"></p>
    <p><input type="submit"></p>
</form>
方法二：在AJAX中
放在data里：
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <script src="/static/jquery-3.3.1.js"></script>
    <title>Title</title>
</head>
<body>
<form action="" method="post">
    {% csrf_token %}
    <p>用户名：<input type="text" name="name"></p>
    <p>密码：<input type="text" name="password" id="pwd"></p>
    <p><input type="submit"></p>
</form>
<button class="btn">点我</button>
</body>
<script>
    $(".btn").click(function () {
        $.ajax({
            url: '',
            type: 'post',
            data: {
                'name': $('[name="name"]').val(),
                'password': $("#pwd").val(),
                'csrfmiddlewaretoken': $('[name="csrfmiddlewaretoken"]').val()
            },
            success: function (data) {
                console.log(data)
            }

        })
    })
</script>
</html>
放在cookie里：
获取cookie：document.cookie
是一个字符串，可以自己用js切割，也可以用jquery的插件
获取cookie：$.cookie('csrftoken')
设置cookie：$.cookie('key','value')

# ================================================================================================

五、CSRF的全站禁用、局部使用以及局部禁用
全站禁用：在settings.py文件中注释掉中间件中的：
'django.middleware.csrf.CsrfViewMiddleware',

局部禁用：用装饰器（在FBV中使用）
from django.views.decorators.csrf import csrf_exempt,csrf_protect
# 不再检测，局部禁用（前提是全站使用）
# @csrf_exempt
# 检测，局部使用（前提是全站禁用）
# @csrf_protect
def csrf_token(request):
    if request.method=='POST':
        print(request.POST)

        return HttpResponse('ok')
    return render(request,'csrf_token.html')
在CBV中使用：
# 需要导入特定的装饰器装饰一下，局部禁用、局部使用的装饰器
from django.views import View
from django.views.decorators.csrf import csrf_exempt,csrf_protect
from django.utils.decorators import method_decorator

# CBV的csrf装饰器，只能加载类上（指定方法为dispatch）和dispatch方法上

@method_decorator(csrf_exempt,name='dispatch')
class Foo(View):
    
    # @method_decorator(csrf_exempt)
    def dispatch(self, request, *args, **kwargs):
        return super(HomeView, self).dispatch(request, *args, **kwargs)

    def get(self,request):
        pass
    
    def post(self,request):
        pass
