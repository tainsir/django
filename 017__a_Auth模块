Auth模块
# ==================================================================================
# ==================================================================================
今日内容
	-auth组件
		-auth是什么?
		-django内置的用户认证系统,可以快速的实现,登录,注销,修改密码....
		-怎么用?
			-(1)先创建超级用户:
				-python3 manage.py createsuperuser
				-输入用户名,邮箱(可以不输入),密码,敲回车,这样就创建出一个超级用户
				-也就是在auth_user这个表中插入了一条数据(密码是加密的,所以我不能手动插入)
			-(2)验证用户:
				-from django.contrib import auth
				-user = auth.authenticate(request, username=name, password=pwd)
				-相当于在查询:user=models.User.objects.filter(name=name,pwd=pwd).first()
				-如果校验通过,会返回一个user对象,通过判断user对象,校验是否验证成功
			-(3)登录
				-auth.login(request,user)
				-其实就是在session中写了一条数据
			-(4)一旦登录成功,调了这个函数login(request,user)
				-以后再视图类,函数中的request对象中,就有一个user对象,就是当前登录的用户对象
				-如果没有登录,request.user=AnonymousUser,匿名用户
			-(5)注销
				-auth.logout(request)
				-内部:调用了request.session.flush(),删除了登录状态
			-(6)登录认证装饰器
				-from django.contrib.auth.decorators import login_required
				-@login_required(redirect_field_name='eee',login_url='/login/')
				-redirect_field_name:修改?后面的key值,
				-login_url:如果没有登录,跳转到的页面
					-可以局部配置
					-可以全局配置(在setting中)
						# 全局的配置,如果没有登录,跳到这个路由
						LOGIN_URL='/login/'
			-(7)创建用户:
				-from django.contrib.auth.models import User				
				- 创建超级用户和普通用户
					# 不能用create
					# user=User.objects.create(username=name,password=pwd)
					# 创建超级用户
					# user=User.objects.create_superuser(username=name,password=pwd)
					# 创建普通用户
					user=User.objects.create_user(username=name,password=pwd)
			-(8)校验密码
				-request.user.check_password(pwd)
				-先拿到用户(可以是登录用户,可以现查)
			-(9)修改密码:
				-user.set_password(pwd)
				-user.save()
				-注意:一定要调用save(),否则是不保存的
			-(10)is_authenticated()
				-如果通过验证,是true反之false
			-(11)其他方法(了解):
				-is_active:禁止登录网站(用户还存在,封号)
				-is_staff:是否对网站有管理权限(能不能登录admin)
				
			-(12)删除用户
				-orm删除
		如果想在认证组件上加手机号等其他字段:如何处理
			-(1) 定义一个表模型,跟User一对一管理
				class UserDetail(models.Model):
					phone=models.CharField(max_length=32)
					# 一对一跟auth_user表做关联
					# 如果是从外部引入的表模型,是不能加引号的
					# 如果加引号,只是在当前model找
					user=models.OneToOneField(to=User)
			-(2)定义一个表模型,继承(AbstractUser)
				-from django.contrib.auth.models import AbstractUser
				 class UserInfo(AbstractUser):
					# username,password...都有
					phone=models.CharField(max_length=32)
					sex=models.BooleanField()
				-在setting中配置:
					AUTH_USER_MODEL ='app01.UserInfo'
				-做数据库迁移,以后就没有auth_user这个表了,以后认证组件用的表就是UserInfo
				-原来auth中的其他操作:
					-authentication
					-login
					-logout
					-set_password
					....
					---一样用,完全一样
				-不一样的地方:
					如果之前用到User这个表模型的地方,都换成UserInfo



# ==================================================================================
# ==================================================================================

一、Auth模块是什么？
Auth模块是Django自带的用户认证模块，可以快速的实现，登录，注销，修改密码
# ==================================================================================
二、Auth模块的简单使用
Auth模块自带一张 auth_user 表
创建用户:
# 使用命令行创建超级用户
# 在pycharm自带的终端输入
python3 manage.py createsuperuser
# 回车之后会让你输入字段信息，用户名、密码、邮箱等，邮箱允许为空

ps：添加的密码字段会自动加密，所以不能直接在数据库表内进行操作
# 在 view.py 视图层中创建用户
# 先导入表模型
from django.contrib.auth.models import User

# 自定义一个注册函数，接收用户输入注册信息创建用户
def register(request):
    # 用户信息，从前台传过来，从request中去取出
    
    # 创建超级用户
    #user = User.objects.create_superuser(username=name,password=pwd...)
    # 创建普通用户
    user = User.objects.create_user(username=name,password=pwd...)
    
# ===========================================
2. 用户校验
# 导入auth模块
from django.contrib import auth
# ===========================================
authenticate()

# 提供用户认证功能，即验证用户名及密码是否正确，如果认证成功，会返回一个user对象，
# 通过判断user对象，来判断用户是否可以登录
user = auth.authenticate(request, username=name, password=pwd)
# ===========================================

login(HttpRequest, user)
# 当authenticate函数验证通过时，即表示用户可以登录时
# 使用login函数登录，该函数接收一个HttpRequest对象，以及通过验证的user对象。
# 本质就是在后端为该用户产生相关的session数据
if user:
    auth.login(request,user)
    return HttpResponse('登录成功')
else:
     return HttpResponse('用户名或密码错误')
# ===========================================

logout(request)
# 使用该函数，会将当前请求的session信息清除，即该用户注销
def logout(request):
  auth.logout(request)
# ===========================================

is_authenticated()
# 用来判断当前请求是否通过了认证，返回True 或者 False
ret = request.user.is_authenticated()
# 可以在前台通过判断 ret ，来判断用户当前状态，显示不同的页面效果
# ===========================================

login_required
from django.contrib.auth.decorators import login_required
@login_required
def my_view(request):
  ...

# 若用户没有登录，则会跳转到django默认的 登录URL '/accounts/login/ ' 并传递当前访问url的绝对路径 (登陆成功后，会重定向到该路径)。

# 如果需要自定义登录的URL，则需要在settings.py文件中通过LOGIN_URL进行修改。

LOGIN_URL = '/login/'  # 这里配置成你项目登录页面的路由

# ===========================================
check_password(password) 与 set_password(password)
# check_password(password)
# auth 提供的一个检查密码是否正确的方法，需要提供当前请求用户的密码。密码正确返回True，否则返回False。

# set_password(password)
# auth 提供的一个修改密码的方法，接收 要设置的新密码 作为参数。
# 注意：设置完一定要调用用户对象的save方法！！！


# 修改密码的简单示例
@login_required
def set_password(request):
    user = request.user
    old_password = request.POST.get('old_password', '')
    new_password = request.POST.get('new_password', '')
    repeat_password = request.POST.get('repeat_password', '')

    ret = user.check_password(old_password)
    # 验证旧密码是否正确
    if ret:
        if not new_password:
                err_msg = '新密码不能为空'
            elif new_password != repeat_password:
                err_msg = '两次密码不一致'
            else:
                user.set_password(new_password)
                user.save()
                return redirect("/login/")
        else:
            err_msg = '原密码输入错误'
    content = {
        'err_msg': err_msg,
    }
    return render(request, 'set_password.html', content)
# ===========================================

User对象的属性

User对象属性：username， password
**is_staff **： 用户是否拥有网站的管理权限.
**is_active **： 是否允许用户登录, 设置为 False，可以在不删除用户的前提下禁止用户登录。

# =======================================================================================================
三、扩展默认的 auth_user 表
虽然auth模块贼好用，但是自带的 auth_user 表中字段只有固定的那几个，在实际应用中不能较好的满足需求
所以，我们可以通过继承内置的 AbstractUser  类，来定义一个自己的Model 类
# 在 model.py 中
from django.contrib.auth.models import AbstractUser
class UserInfo(AbstractUser):
    """
    用户信息表
    """
    phone = models.CharField(max_length=11, null=True, unique=True)
    # 等等各种你想要添加的字段

注意:
按上面的方式扩展了内置的auth_user表之后，一定要在settings.py中告诉Django，我现在使用我新定义的UserInfo表来做用户认证。写法如下：
# 引用Django自带的User表，继承使用时需要设置
AUTH_USER_MODEL = "app名.UserInfo"

一旦我们指定了新的认证系统所使用的表，我们就需要重新在数据库中创建该表，而不能继续使用原来默认的auth_user表了。
