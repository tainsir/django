ORM多表操作
# ==================================================================================================
一、创建表模型
class Publish(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=32)
    addr = models.CharField(max_length=64)
    email = models.EmailField()


class Author(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=32)
    sex = models.IntegerField()
    authordetail = models.OneToOneField(to='AuthorDetail', to_field='id')


class AuthorDetail(models.Model):
    id = models.AutoField(primary_key=True)
    phone = models.CharField(max_length=32)
    address = models.CharField(max_length=64)


class Book(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=32)
    price = models.DecimalField(max_digits=5, decimal_places=2)
    publish = models.ForeignKey(to=Publish, to_field='id')
    authors = models.ManyToManyField(to=Author)

# ==================================================================================================

二、一对多
添加表记录：
# 方式一
publish_obj=Publish.objects.get(id=1)
book_obj=Book.objects.create(name='龙族',price=99,publish=publish_obj)

# 方式二
 book_obj=Book.objects.create(name='龙族',price=99,publish_id=1)

"""
    publish = 对象
    publish_id = id
"""
删除表记录:
# 同单表删除，查询出想要删除的对象 .delete()
Book.objects.all().delete()
修改表记录：
# 方式一
book=Book.objects.get(pk=1)
book.publish=publish_obj
book.publish_id=2
book.save()

# 方式二
book=Book.objects.filter(pk=1).update(publish=publish_obj)
book=Book.objects.filter(pk=1).update(publish_id=1)

# ==================================================================================================

三、多对多
add：可以传对象,可以传id,可以传多个
remove：可以传对象,可以传id,可以传多个
clear：没有参数
set：跟上面不一样,必须传列表,列表里面可以是对象,可以是id
# 为龙族添加hgq、hhh两个作者
hgq=Author.objects.filter(name='hgq').first()
hhh=Author.objects.filter(name='hhh').first()
book=Book.objects.filter(name='龙族').first()
# add 添加多个对象
book.authors.add(hgq,hhh)

# 删除 remove,可以传对象,可以传id,可以传多个,不要混着用
book.authors.remove(1)

# clear清空所有
book.authors.clear()

# set,先清空,在新增,要传一个列表,列表内可以是, id,也可以是对象
book.authors.set(*[hgq,])

# ==================================================================================================

四、基于对象的跨表查询（子查询）
一对一：
# 正向  查询作者hgq的手机号 
author=Author.objects.filter(name='hgq').first()
# author.authordetail 就是作者详情的对象
authordetail=author.authordetail
print(authordetail.phone)

# 反向  查询地址是: 上海 的作者名字
authordetail=AuthorDetail.objects.filter(address='上海').first()
# authordetail.author  这是作者对象
author=authordetail.author
print(author.name)
一对多：
# 正向:正向查询按字段  查询龙族这本书的出版
book=Book.objects.filter(name='龙族').first()
# book.publish  就是出版社对象
pulish=book.publish
print(pulish.email)

# 反向:反向按表名小写_set.all()  查询地址是北京 的出版社出版的图书
publish=Publish.objects.filter(address='北京').first()
# publish.book_set.all()  拿出所有的图书
books=publish.book_set.all()
count():
# 统计一下条数
books=publish.book_set.all().count()
print(books)
多对多:
# 正向:正向查询按字段   查询龙族这本书所有的作者
book=Book.objects.filter(name='龙族').first()
# book.authors.all()  是所有的作者,是一个queryset对象,可以继续点 
print(book.authors.all())
    
# 反向查询:反向按表名小写_set.all()  查询hgq写的所有书
hgq=Author.objects.filter(name='hgq').first()
books=hgq.book_set.all()
print(books)

# ==================================================================================================

五、基于双下划线的跨表查询
连表查询
# 查询龙族这本书所有的作者的手机号
book=Book.objects.filter(name='龙族').first()
authors=book.authors.all()
for author in authors:
    authordetail=author.authordetail
    print(authordetail.phone)
一对一双下划线查询
正向：按字段，跨表可以在filter，也可以在values中
反向：按表名小写，跨表可以在filter，也可以在values中
# 查询hgq作者的手机号   
# 以author表作为基表，正向查询，跨表的话，按字段
ret=Author.objects.filter(name='hgq').values('authordetail__phone')
print(ret)
# 以authordetail作为基表，反向查询，按表名小写，跨表的话，用表名小写
ret=AuthorDetail.objects.filter(author__name='hgq').values('phone')
print(ret)
一对多双下划线查询
# 查询出版社为北京出版社出版的所有图书的名字,价格
ret = Book.objects.filter(name='北京出版社').values('book__name','book__price')
print(ret)
ret=Book.objects.filter(publish__name='北京出版社').values('name','price')
print(ret)
多对多双下划线查询
# 查询红楼梦的所有作者名字
ret=Book.objects.filter(name='红楼梦').values('authors__name')
print(ret)
ret=Author.objects.filter(book__name='红楼梦').values('name')
print(ret)
进阶练习--连续跨表
# 查询北京出版社出版过的所有书籍的名字以及作者的姓名
ret=Publish.objects.filter(name='北京出版社').values('book__name','book__authors__name')
print(ret)

# ==================================================================================================

六、聚合查询--aggregate
聚合函数：
from django.db.models import Avg,Count,Max,Min,Sum
# 他是queryset的终止子句
# 计算所有图书的平均价格
ret=Book.objects.all().aggregate(Avg('price'))
print(ret)

# 计算图书的最高价格
ret=Book.objects.all().aggregate(Max('price'))
print(ret)

# 计算图书的最高价格,最低价格,平均价格,总价
ret=Book.objects.all().aggregate(Max('price'),Min('price'),Avg('price'),Sum('price'))
print(ret)


# ==================================================================================================

七、分组查询--annotate
annotate()为调用的QuerySet中每一个对象都生成一个独立的统计值（统计方法用聚合函数）。
总结 ：跨表分组查询本质就是将关联表join成一张表，再按单表的思路进行分组查询。
# 统计每一本书作者个数
ret=Book.objects.all().annotate(c=Count('authors'))
# 以每本书作者的个数进行分组，得到一个作者对象
print(ret)
for r in ret:
    print(r.name,'---->',r.c)
总结: group by 谁,就以谁做基表,filter过滤,annotate取分组,values取值
终极总结:
values在前,表示group by,在后,表示取值
filter在前,表示过滤(where),在后,表示having(对分组之后的结果再进行过滤)

# ==================================================================================================

八、F查询与Q查询
F函数：为了字段=后面的值,不能放字段,所以用F函数包裹一下就可以了
# 查询评论数大于阅读数的书
# 这样不行，进行不下去了，使用F函数包裹一下('read_num')
# ret=Book.objects.all().filter(commit_num__gt=read_num)
# 这么来做
ret=Book.objects.all().filter(commit_num__gt=F('read_num'))
print(ret)
Q函数：为了构造与&,或|,非~的关系
# 查询作者名字是lqz或者名字是egon的书
# 这样行不通
# ret=Book.objects.all().filter(authors__name='lqz',authors__name='egon')
# 这样出来
ret=Book.objects.all().filter(Q(authors__name='lqz')|Q(authors__name='egon'))
print(ret)
