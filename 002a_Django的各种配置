# 1 应用程序有两种模式/架构:C/S、B/S
#   web 应用程序：一般B/C架构，采用Internet上标准的通信协议（TCP/IP协议）
# HTTP协议特性
#     1.基于TCP/IP协议之上的应用层协议
#     2.基于请求－响应模式
#         客户端--------->服务器
#                 (发送请求，通过指定的访问地址(URL)获取（或上传)服务器资源（文件等信息）
#                 GET/ HTTP/1.1
#                 HOST:hackr.jp
#                 请求报文格式: POST（方法）+/form/entry（url）+Http 1.1(协议版本)
#                             请求头+请求体
#         服务器--------->客户端
#                 （接收请求后，发送响应信息）
#                 HTTP/1.1 200 OK、Date、Content-Length：、Context-Type：text/html
#                 响应状态码:
#                 1xx--Informational--接收的请求正在处理
#                 2xx--Success--请求正常处理完毕
#                 3xx--Redirection--需要进行附加操作以完成请求
#                 4xx--ClientError--服务器无法处理请求
#                 5xx--ServerError--服务器处理请求出错
#
#     3.无状态保存
#     4.无连接，限制每次连接只处理一个请求。
#
#
# URL格式:
#     协议：//IP:端口（80）/路径?name=lqz&age=18
#
#
#
# 3 python中的web框架
#     a :socket
#     b:路由跟视图函数匹配关系，采用
#     c:模板渲染
#
#     django: a: 用了别人的wsgiref   b:自己写的   c:自己写的
#     flask: a:用了别人的            b:自己写的   c:用了别人的:jinja2
#     tornado: a 自己写的，socket支持高并发           b:自己写的   c:自己写的
#
# # ===============================================================================
# 一 MVC与MTV模型
# Web服务器开发领域中有MVC、MTV两种模式
# MVC:Model模型View视图Controller控制器
#        用户输入到控制器，传递指令给model模型+响应用户操作给View视图
#             model对数据库存、取数据、业务数据给view视图，view展示给用户信息
#
# MTV:Model模型Template模板View视图
#
# # ===============================================================================
# 二 Django的下载与基本命令
# 1.下载Django
# 命令行输入：pip3 install django
# 　　      pip install django==1.11.9 -i http://pypi.hustunique.org/simple   指定版本号，指定国内镜像
#
# 2.创建一个django project
# django-admin.py startproject mysite
#
# 3、启动django项目
# python manage.py runserver 8001
# 访问：http://127.0.0.1:8080/时就可以看到：django就启动了
#

四 Django静态文件配置Settings
项目新建一个目录叫：static，我们的css文件，js文件，图片文件都放在这下面
STATIC_URL='/static/'
STATICFILES_DIRS=[
    os.path.join(BASE_DIR, 'static'),
    # 后面可以创建更多，逐条循环搜索。
]
# =================================

Settings配置文件修改django数据库

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        # 数据库名称
        'NAME': 'day1116',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        # 数据库用户名密码
        'USER': 'root',
        'PASSWORD': '123',
    }
}

或者
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'lqz',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'ATOMIC_REQUEST': True,
        'OPTIONS': {
            "init_command": "SET storage_engine=MyISAM",
        }
    }
}
'''
'NAME':要连接的数据库，连接前需要创建好
'USER':连接数据库的用户名
'PASSWORD':连接数据库的密码
'HOST':连接主机，默认本机
'PORT':端口 默认3306
'ATOMIC_REQUEST': True,
设置为True统一个http请求对应的所有sql都放在一个事务中执行（要么所有都成功，要么所有都失败）。
是全局性的配置， 如果要对某个http请求放水（然后自定义事务），可以用non_atomic_requests修饰器 
'OPTIONS': {
             "init_command": "SET storage_engine=MyISAM",
            }
设置创建表的存储引擎为MyISAM，INNODB
'''
# =================================
因为django默认你导入的驱动是MySQLdb，可是MySQLdb 对于py3有很大问题，
所以我们需要的驱动是PyMySQL 所以，我们只需要找到项目名app文件下的__init__,在里面写入代码：
import pymysql
pymysql.install_as_MySQLdb()
最后通过两条数据库迁移命令即可在指定的数据库中创建表 ：
python manage.py makemigrations
python manage.py migrate
# =================================
确保配置文件中的INSTALLED_APPS中写入我们创建的app名称

复制代码
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "book"
]

# =================================

如果报错如下：

django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.3 or newer is required; you have 0.7.11.None
MySQLclient目前只支持到python3.4，因此如果使用的更高版本的python，需要修改如下：

通过查找路径C:\Programs\Python\Python36-32\Lib\site-packages\Django-2.0-py3.6.egg\django\db\backends\mysql
这个路径里的文件把

if version < (1, 3, 3):
     raise ImproperlyConfigured("mysqlclient 1.3.3 or newer is required; you have %s" % Database.__version__)
注释掉就可以了

# =================================
    # filter在前表示where value在前表group by
    # value在后表示取值,filter在后,表示having
# 在Python脚本中调用Django,调试mysql语句，创建文件，导入以下：

import os
if __name__ == '__main__':
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "untitled15.settings")
    import django
    django.setup()

    from app01 import models

    books = models.Book.objects.all()
    print(books)

# =================================
Django终端打印SQL语句
如果想打印orm转换过程中的sql，需要在settings中进行如下配置：
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level':'DEBUG',
        },
    }
}

# ===============================
4
增加，删除字段
　　删除，直接注释掉字段，执行数据库迁移命令即可

　　新增字段，在类里直接新增字段，直接执行数据库迁移命令会提示输入默认值，此时需要设置

publish = models.CharField(max_length=12, default='人民出版社', null=True)

注意：
　　1
数据库迁移记录都在
app01下的migrations里

　　2
使用showmigrations命令可以查看没有执行migrate的文件

　　3
makemigrations是生成一个文件，migrate是将更改提交到数据量


五 Django请求的生命周期

用户浏览器-->web服务器（wsgi协议）-->（中间件->URL路由层->视图层->模板层、数据库操作)web应用程序
